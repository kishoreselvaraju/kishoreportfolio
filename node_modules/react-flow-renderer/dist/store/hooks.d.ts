import { StoreModel } from './index';
export declare const useStoreActions: <Result>(mapActions: (actions: import("easy-peasy").ActionMapper<StoreModel, import("easy-peasy").ValidActionProperties<StoreModel>>) => Result) => Result;
export declare const useStoreDispatch: () => import("easy-peasy").Dispatch<StoreModel, import("redux").AnyAction>;
export declare const useStoreState: <Result>(mapState: (state: import("easy-peasy").StateMapper<{
    width: number;
    height: number;
    transform: import("..").Transform;
    elements: import("..").Elements;
    nodes: import("easy-peasy").Computed<StoreModel, import("..").Node[], {}>;
    edges: import("easy-peasy").Computed<StoreModel, import("..").Edge[], {}>;
    selectedElements: import("..").Elements | null;
    selectedNodesBbox: import("..").Rect;
    viewportBox: import("easy-peasy").Computed<StoreModel, import("..").Rect, {}>;
    d3Zoom: import("d3-zoom").ZoomBehavior<Element, unknown> | null;
    d3Selection: import("d3-selection").Selection<Element, unknown, null, undefined> | null;
    d3ZoomHandler: ((this: Element, event: any, d: unknown) => void) | undefined;
    minZoom: number;
    maxZoom: number;
    translateExtent: import("..").TranslateExtent;
    nodesSelectionActive: boolean;
    selectionActive: boolean;
    userSelectionRect: import("..").SelectionRect;
    connectionNodeId: string | null;
    connectionHandleId: string | null;
    connectionHandleType: "source" | "target" | null;
    connectionPosition: import("..").XYPosition;
    snapToGrid: boolean;
    snapGrid: import("..").SnapGrid;
    nodesDraggable: boolean;
    nodesConnectable: boolean;
    elementsSelectable: boolean;
    multiSelectionActive: boolean;
    reactFlowVersion: string;
    onConnect?: import("..").OnConnectFunc | undefined;
    onConnectStart?: import("..").OnConnectStartFunc | undefined;
    onConnectStop?: import("..").OnConnectStopFunc | undefined;
    onConnectEnd?: import("..").OnConnectEndFunc | undefined;
}>) => Result, equalityFn?: ((prev: Result, next: Result) => boolean) | undefined) => Result;
export declare const useStore: () => import("easy-peasy").Store<StoreModel, import("easy-peasy").EasyPeasyConfig<undefined, {}>>;
